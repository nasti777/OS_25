Работа с pipe. Часть 1

Для работы с пайпом можно воспользоваться системными вызовами write() для записи и read() для чтения аналогично тому,как это делалось в записи в файл и чтения из файла. Различие в том, что при чтении из файла информация не исчезает, а байт, прочитанный из пайпа удаляется.
Для создания пайпа используется системнй вызов pipe(), которому в качестве параметра должен быть передан массив из двух целых чисел. Элемент массива с индексом 0 используется как файловый дескриптор для чтения, а элемент с индексом 1 используется для записи.

Пример:
int fd[2];
pipe(fd);

Таблица файловых дескрипторов наследуется дочерним процессом от родительского, поэтому рпоцесс-ребёнок может отправлять информацию через пайп любому из своих предков, так же, как и читать информацию,отправленную ими в пайп.
Пайп существует до тех пор, пока хотя бы один из его потоков не закрыт. Для этого нужно, чтобы каждый родственный процесс завершил работу, или в процессе работы явно закрыл входной и выходной потоки

Работа с pipe. Часть 2
Двунаправленная связь между родственными процессами

Для организации двунаправленной связи легче всего использовать два отдельных канала связи - пайп 1 и пайп2. Пайп1 будет передавать информацию от процесса-родителя процессу-ребёнку, а пайп2 - в обратном направлении.
Файловые дескрипторы разных пайпов будем хранить в массивах fd1 и fd2.
Для родительского процесса сразу закрываем входной поток пайп1(close(fd1[0])), а также выходной поток пайп2(close(fd[1]))Для дочернего процесса закрываем выходной поток пайп1 и входной поток пайп2   
После записи информации в пайп родительским процессом выполняется чтение информации из пайп2, при этом дочерний процесс ещё ничего не записал в пайп2. Поэтому родительский процесс при попытке чтения из пайп2 блокируется и ждёт появления информации.
Информация от дочернего процесса в пайп2 появляется после того, как процесс-ребёнок прочитает информации из пайп1.
Поэтому дочерний процесс заканчивает работу раньше, чем процес-родитель прочитает информацию от него из пайп2

Результат выполнения программы pr0092m2.out:

Читаем строку, отправленную процессом-ребёнком ...
Строка, прочитанная дочерним процессом: Информация для дочернего процесса от родителя
Процесс-ребёнок завершил работу
Прочитанаая родителем строка: Информация для родительского процесса от ребёнка
Процесс родитель завершил работу
